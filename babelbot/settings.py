"""
Django settings for babelbot project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
import environ

# Load environment variables from .env file
env = environ.Env()
env_path = Path(__file__).resolve().parent.parent / '.env'
if env_path.exists():
    environ.Env.read_env(str(env_path))
    print(f"Loaded .env file from: {env_path}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use environment variable if set, otherwise use a default for development
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-development-key-only')

# SECURITY WARNING: don't run with debug turned on in production!
if not "ON_HEROKU" in os.environ:
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = ["*"]

# Authentication settings
LOGIN_URL = '/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


# Application definition

INSTALLED_APPS = [
    "main_app",
    "translator",
    "tts",
    "ocr",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "babelbot.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "babelbot.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.config(
        default='sqlite:///' + str(BASE_DIR / 'db.sqlite3'),
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Add PostgreSQL-specific options only if we're using PostgreSQL
if 'ON_HEROKU' in os.environ:
    DATABASES['default']['OPTIONS'] = {
        'sslmode': 'require'
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    BASE_DIR / "main_app" / "static",
]

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# WhiteNoise configuration
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'main_app': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Configure Django App for Heroku
if 'ON_HEROKU' in os.environ:
    try:
        import django_heroku
        django_heroku.settings(locals())
        
        # Force HTTPS in production
        SECURE_SSL_REDIRECT = True
        SESSION_COOKIE_SECURE = True
        CSRF_COOKIE_SECURE = True
    except ImportError:
        print("Warning: django-heroku not installed. Some Heroku-specific settings may not be applied.")

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# Debug: Print the email settings
print("EMAIL_HOST_USER:", os.environ.get('EMAIL_HOST_USER', ''))
print("EMAIL_HOST_PASSWORD:", os.environ.get('EMAIL_HOST_PASSWORD', ''))

EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER', '')
SERVER_EMAIL = os.environ.get('EMAIL_HOST_USER', '')

# Password Reset Settings
PASSWORD_RESET_TIMEOUT = 3600  # 1 hour

# Google Cloud Vision API settings
GOOGLE_TYPE = env('GOOGLE_TYPE', default='service_account')
GOOGLE_PROJECT_ID = env('GOOGLE_PROJECT_ID', default='')
GOOGLE_PRIVATE_KEY_ID = env('GOOGLE_PRIVATE_KEY_ID', default='')
GOOGLE_PRIVATE_KEY = env('GOOGLE_PRIVATE_KEY', default='').replace('\\n', '\n')
GOOGLE_CLIENT_EMAIL = env('GOOGLE_CLIENT_EMAIL', default='')
GOOGLE_CLIENT_ID = env('GOOGLE_CLIENT_ID', default='')
GOOGLE_AUTH_URI = env('GOOGLE_AUTH_URI', default='https://accounts.google.com/o/oauth2/auth')
GOOGLE_TOKEN_URI = env('GOOGLE_TOKEN_URI', default='https://oauth2.googleapis.com/token')
GOOGLE_AUTH_PROVIDER_X509_CERT_URL = env('GOOGLE_AUTH_PROVIDER_X509_CERT_URL', default='https://www.googleapis.com/oauth2/v1/certs')
GOOGLE_CLIENT_X509_CERT_URL = env('GOOGLE_CLIENT_X509_CERT_URL', default='')

# Debug: Print the Google Cloud settings
print("GOOGLE_PROJECT_ID:", GOOGLE_PROJECT_ID)
print("GOOGLE_CLIENT_EMAIL:", GOOGLE_CLIENT_EMAIL)
